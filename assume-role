# Using Assume Role to Execute Terraform

This guide walks you through the process of using AWS Assume Role to execute Terraform scripts securely.

## Table of Contents

1. [Create IAM Roles](#create-iam-roles)
2. [Configure AWS CLI](#configure-aws-cli)
3. [Assume the Role](#assume-the-role)
4. [Set Environment Variables](#set-environment-variables)
5. [Run Terraform Commands](#run-terraform-commands)
6. [Cleanup](#cleanup)

- [Terraform](https://www.terraform.io/downloads.html)
- [AWS CLI](https://aws.amazon.com/cli/)


## 1. Create IAM Roles

# 1. Create an IAM Role in the Target Account:
       In the AWS Management Console, navigate to the IAM service. Create a new IAM role that will be assumed by your Terraform scripts. Attach the necessary policies that allow the required actions on resources.

# 2. Create an IAM Role in the Admin Account:
        Similarly, create an IAM role in your admin account (the account running the Terraform scripts). Attach a trust policy that allows the admin account to assume the role created in the target account.

...

## 2. Configure AWS CLI
1. Configure AWS CLI with Admin Account Credentials:
   Install and configure the AWS CLI in your local environment with the credentials of your admin account.
   `aws configure`

...

## 3. Assume the Role
1. Assume the Role:
   Use the AWS CLI to assume the IAM role you created in the target account. Replace **ROLE_ARN** with the ARN of the role.
   `aws sts assume-role --role-arn ROLE_ARN --role-session-name my-session-name`

2. Capture the Output:
The aws sts assume-role command will output temporary credentials that include **#AccessKeyId, #SecretAccessKey, and SessionToken**. Capture these values.
    
...

## 4. Set Environment Variables
 1. Export Environment Variables:
   Export the temporary credentials as environment variables in your terminal. Replace the values below with the actual values from the `aws sts assume-role` command output.
   `export` **AWS_ACCESS_KEY_ID=YOUR_ACCESS_KEY**
   `export` **AWS_SECRET_ACCESS_KEY=YOUR_SECRET_KEY**
   `export` **AWS_SESSION_TOKEN=YOUR_SESSION_TOKEN**

...

## 5. Run Terraform Commands
1. Initialize Terraform:
   Navigate to your Terraform project directory and run `terraform init`.

2. Execute Terraform Commands:
   With the environment variables set, you can now run Terraform commands, and they will use the assumed role's permissions
   `terraform plan`
   `terraform apply`

...

## 6. Cleanup

1. Unset Environment Variables:
   Once you've completed your Terraform tasks, unset the environment variables to remove the assumed role credentials from your environment.
   
   `unset` AWS_ACCESS_KEY_ID
   `unset` AWS_SECRET_ACCESS_KEY
   `unset` AWS_SESSION_TOKEN

...


# Remember, the steps provided are a high-level guide, and you should adapt them to your specific AWS environment and requirements. Always follow security best practices and consider rotating or revoking temporary credentials when they are no longer needed.


